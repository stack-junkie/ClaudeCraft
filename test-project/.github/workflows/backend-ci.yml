name: Backend CI/CD

on:
  push:
    branches: [ main, develop ]
    paths: [ 'backend/**', '.github/workflows/backend-ci.yml' ]
  pull_request:
    branches: [ main, develop ]
    paths: [ 'backend/**', '.github/workflows/backend-ci.yml' ]

jobs:
  # Python/FastAPI Backend Pipeline
  python-backend:
    if: contains(github.event.head_commit.message, 'python') || contains(github.repository, 'python') || hashFiles('backend/requirements.txt')
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]
    
    defaults:
      run:
        working-directory: ./backend
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
        cache-dependency-path: backend/requirements.txt
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-cov bandit safety
    
    - name: Run code formatting check
      run: |
        pip install black isort
        black --check .
        isort --check-only .
    
    - name: Run linting
      run: |
        pip install flake8 mypy
        flake8 .
        mypy . --ignore-missing-imports
    
    - name: Run security scan
      run: |
        bandit -r . -x tests/
        safety check
    
    - name: Run tests with coverage
      run: |
        pytest --cov=app --cov-report=xml --cov-report=html
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend-python
        name: backend-python-coverage
    
    - name: Test database migrations
      run: |
        alembic upgrade head
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db

  # Node.js/Express Backend Pipeline
  node-backend:
    if: contains(github.event.head_commit.message, 'node') || contains(github.repository, 'node') || hashFiles('backend/package.json')
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    defaults:
      run:
        working-directory: ./backend
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linting
      run: npm run lint
    
    - name: Run type checking (if TypeScript)
      run: |
        if [ -f "tsconfig.json" ]; then
          npx tsc --noEmit
        fi
    
    - name: Run security audit
      run: |
        npm audit --audit-level moderate
    
    - name: Run tests with coverage
      run: npm run test -- --coverage
      env:
        NODE_ENV: test
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage/lcov.info
        flags: backend-node
        name: backend-node-coverage

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Snyk security scan (Python)
      if: hashFiles('backend/requirements.txt')
      uses: snyk/actions/python@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=medium --file=backend/requirements.txt
    
    - name: Run Snyk security scan (Node.js)
      if: hashFiles('backend/package.json')
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=medium --file=backend/package.json
    
    - name: Run OWASP ZAP Baseline Scan
      uses: zaproxy/action-baseline@v0.10.0
      with:
        target: 'http://localhost:8000'

  deploy-staging:
    if: github.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest
    needs: [python-backend, node-backend, security-scan]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to Railway (Staging)
      uses: bervProject/railway-deploy@v1.0.0
      with:
        railway_token: ${{ secrets.RAILWAY_TOKEN }}
        service: ${{ secrets.RAILWAY_SERVICE_NAME }}-staging
        environment: staging

  deploy-production:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: [python-backend, node-backend, security-scan]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to Railway (Production)
      uses: bervProject/railway-deploy@v1.0.0
      with:
        railway_token: ${{ secrets.RAILWAY_TOKEN }}
        service: ${{ secrets.RAILWAY_SERVICE_NAME }}
        environment: production
    
    - name: Run post-deployment health check
      run: |
        sleep 30
        curl -f ${{ secrets.PRODUCTION_API_URL }}/health || exit 1

  performance-test:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: [deploy-production]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run load tests
      uses: k6-io/action@v0.3.1
      with:
        filename: backend/tests/load/basic-load-test.js
      env:
        API_BASE_URL: ${{ secrets.PRODUCTION_API_URL }}